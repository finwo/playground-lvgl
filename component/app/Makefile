lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

LIBS:=
SRC:=
BIN?=playground-lvgl

UNAME_MACHINE=$(call lc,$(shell uname -m))
UNAME_SYSTEM=$(call lc,$(shell uname -s))

CC:=clang
CPP:=clang

SRC+=$(wildcard src/*.c)

INCLUDES:=

override CFLAGS?=-Wall -O2
override CFLAGS+=-I src -DDLV_CONF_INCLUDE_SIMPLE
override LDFLAGS?=

override CPPFLAGS?=

override CFLAGS+=-D WEBVIEW_STATIC
# override CFLAGS+=-D WINTERM

ifeq ($(OS),Windows_NT)
	# CFLAGS += -D WIN32
	override CPPFLAGS+=-lstdc++
	override CPPFLAGS+=
	ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
		# CFLAGS += -D AMD64
	else
		ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
			# CFLAGS += -D AMD64
		endif
		ifeq ($(PROCESSOR_ARCHITECTURE),x86)
			# CFLAGS += -D IA32
		endif
	endif
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		# CFLAGS += -D LINUX
		override CPPFLAGS+=-lstdc++
		override CFLAGS+=$(shell pkg-config --cflags glib-2.0)
		override LDFLAGS+=$(shell pkg-config --libs glib-2.0)
		override CFLAGS+=-D _GNU_SOURCE
	endif
	ifeq ($(UNAME_S),Darwin)
		# CFLAGS += -D OSX
		override CPPFLAGS+=-std=c++14
		override CFLAGS+=-D _BSD_SOURCE
	endif
	UNAME_P := $(shell uname -p)
	ifeq ($(UNAME_P),x86_64)
		# CFLAGS += -D AMD64
	endif
	ifneq ($(filter %86,$(UNAME_P)),)
		# CFLAGS += -D IA32
	endif
	ifneq ($(filter arm%,$(UNAME_P)),)
		# CFLAGS += -D ARM
	endif
	# TODO: flags for riscv
endif

include lib/.dep/config.mk

SRC+=$(CSRCS)

OBJ:=$(SRC:.c=.o)
OBJ:=$(OBJ:.cc=.o)

LOG_USE_COLOR?=0
ifeq ($(LOG_USE_COLOR),1)
  override CFLAGS+=-DLOG_USE_COLOR
endif

override CFLAGS+=$(INCLUDES)
override CPPFLAGS+=$(INCLUDES)
override CPPFLAGS+=$(CFLAGS)

override CFLAGS+=-DLV_USE_LABEL

htmltools:=
htmltools+=src/view.html
# htmltools+=tool/oauth2-callback/dist/index.bundled.html
# htmltools+=tool/overlay-chat/dist/index.bundled.html
# htmltools+=tool/overlay-shoutout/dist/index.bundled.html

headertools=$(htmltools:.html=.h)

.PHONY: default
default: ${BIN}

$(OBJ): $(headertools)

component/tool-bin2c/bin2c-${UNAME_SYSTEM}-${UNAME_MACHINE}:
	${MAKE} --directory "component/tool-bin2c"

# tool/client-jerry/dist/index.js:
# 	bash -c "cd $$(dirname $$(dirname $@)) && npm i && npm run build"

# tool/overlay-chat/dist/index.bundled.html: tool/client-jerry/dist/index.js

# htmltools:  $(htmltools)
# $(htmltools):
# 	bash -c "cd $$(dirname $$(dirname $@)) && npm i && npm run build"

$(headertools): $(htmltools)
	../tool-bin2c/bin2c-${UNAME_SYSTEM}-${UNAME_MACHINE} < $(@:.h=.html) > $@

.cc.o:
	$(CPP) $< $(CPPFLAGS) -c -o $@

.c.o:
	$(CC) $< $(CFLAGS) -c -o $@

$(BIN): $(OBJ)
	$(CPP) $(OBJ) $(CPPFLAGS) $(LDFLAGS) -s -o $@

# .PHONY: watch
# watch:
# 	npx concurrently \
# 		"cd tool/control-ui	   ; npm install" \
# 		"cd tool/oauth2-callback  ; npm install" \
# 		"cd tool/overlay-chat	 ; npm install" \
# 		"cd tool/overlay-shoutout ; npm install"
# 	npx concurrently \
# 		"cd tool/control-ui	   ; npm run watch" \
# 		"cd tool/oauth2-callback  ; npm run watch" \
# 		"cd tool/overlay-chat	 ; npm run watch" \
# 		"cd tool/overlay-shoutout ; npm run watch"

.PHONY: clean
clean:
# 	rm -rf $(BIN)
	rm -rf $(OBJ)
# 	rm -rf tool/client-jerry/dist
# 	rm -rf tool/conrol-ui/dist
# 	rm -rf tool/oauth2-callback/dist
# 	rm -rf tool/overlay-chat/dist
# 	rm -rf tool/overlay-shoutout/dist
# 	rm -rf tool/bin2c/bin2c-${UNAME_SYSTEM}-${UNAME_MACHINE}

# .PHONY: sterile
# sterile: clean
# 	rm -rf tool/client-jerry/node_modules
# 	rm -rf tool/conrol-ui/node_modules
# 	rm -rf tool/oauth2-callback/node_modules
# 	rm -rf tool/overlay-chat/node_modules
# 	rm -rf tool/overlay-shoutout/node_modules
